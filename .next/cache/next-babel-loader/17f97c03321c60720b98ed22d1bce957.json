{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hassan\\\\Documents\\\\Projects\\\\AnimeCalendar\\\\components\\\\Dailies.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from 'isomorphic-unfetch';\nimport moment from 'moment';\n\nconst Dailies = () => {\n  const {\n    0: hasError,\n    1: setErrors\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    anime: []\n  });\n  const today = new Date();\n  var dailyArr;\n\n  async function fetchData() {\n    const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\n    res.json().then(res => setData(res)).catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  function formatDate(date) {\n    var newDate = new moment(date);\n    return newDate.format('MM/DD/YYYY');\n  }\n\n  dailyArr = data.anime.filter(anime => {\n    if (formatDate(anime.airing_start) !== formatDate(today)) {\n      return false;\n    }\n\n    return true;\n  }).map(anime => {\n    return anime;\n  });\n\n  if (dailyArr.length == 0) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"No anime was released today :(\");\n  }\n\n  console.log(dailyArr);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, dailyArr.map(anime => __jsx(\"li\", {\n    key: anime.mal_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: anime.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, anime.title)))));\n}; // const Dailies = props => {\n//     console.log(`${props.dailyArr[1].title}`)\n//     return(\n//     <div>\n//         <h3>{props.dailyArr[0].title}</h3>\n//     </div>\n//     )\n// }\n// Dailies.getStaticProps = async function () {\n//     const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\n//     const data = await res.json();\n//     var today = new Date();\n//     var dailyArr = data.anime.map(anime => ({\n//         title: anime.title,\n//         date: anime.airing_start,\n//         image: anime.image_url\n//     }));\n//     // for (var i = 0; i < data.length; i++) {\n//     //     if (data.anime[i].airing_start == today) {\n//     //          dailyArr = data.anime.map(anime => ({\n//     //             title: anime.title,\n//     //             date: anime.airing_start,\n//     //             image: anime.image_url\n//     //         }));\n//     //     }\n//     // }\n//     console.log(dailyArr);\n//     console.log(data.anime[0].title);\n//     return { dailyArr }\n//}\n\n\nexport default Dailies;","map":{"version":3,"sources":["C:/Users/Hassan/Documents/Projects/AnimeCalendar/components/Dailies.js"],"names":["React","useState","useEffect","fetch","moment","Dailies","hasError","setErrors","data","setData","anime","today","Date","dailyArr","fetchData","res","json","then","catch","err","formatDate","date","newDate","format","filter","airing_start","map","length","console","log","mal_id","url","title"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACO,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC;AAACS,IAAAA,KAAK,EAAE;AAAR,GAAD,CAAhC;AACA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AAEA,MAAIC,QAAJ;;AACA,iBAAeC,SAAf,GAA2B;AACvB,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAAC,6CAAD,CAAvB;AACAY,IAAAA,GAAG,CACEC,IADL,GAEKC,IAFL,CAEUF,GAAG,IAAIN,OAAO,CAACM,GAAD,CAFxB,EAGKG,KAHL,CAGWC,GAAG,IAAIZ,SAAS,CAACY,GAAD,CAH3B;AAMH;;AACDjB,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,SAAS;AAEZ,GAHQ,EAGP,EAHO,CAAT;;AAIA,WAASM,UAAT,CAAoBC,IAApB,EACA;AACI,QAAIC,OAAO,GAAG,IAAIlB,MAAJ,CAAWiB,IAAX,CAAd;AACA,WAAOC,OAAO,CAACC,MAAR,CAAe,YAAf,CAAP;AACH;;AAEDV,EAAAA,QAAQ,GAAGL,IAAI,CAACE,KAAL,CAAWc,MAAX,CAAkBd,KAAK,IAAG;AACjC,QAAGU,UAAU,CAACV,KAAK,CAACe,YAAP,CAAV,KAAmCL,UAAU,CAACT,KAAD,CAAhD,EAAwD;AACpD,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GALU,EAKRe,GALQ,CAKJhB,KAAK,IAAE;AAAC,WAAOA,KAAP;AAAa,GALjB,CAAX;;AAMA,MAAGG,QAAQ,CAACc,MAAT,IAAmB,CAAtB,EACA;AACI,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAP;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AAGQ,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,QAAQ,CAACa,GAAT,CAAahB,KAAK,IAEf;AAAI,IAAA,GAAG,EAAEA,KAAK,CAACoB,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,IAAI,EAAEpB,KAAK,CAACqB,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBrB,KAAK,CAACsB,KAA3B,CADJ,CAFH,CADL,CAFJ,CAFJ;AAiBX,CAvDD,C,CAwDA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA,eAAe3B,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport fetch from 'isomorphic-unfetch';\r\nimport moment from 'moment'\r\n\r\nconst Dailies = () => {\r\n    const [hasError, setErrors] = useState(false);\r\n    const [data, setData] = useState({anime: []});\r\n    const today = new Date();\r\n    \r\n    var dailyArr;\r\n    async function fetchData() {\r\n        const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\r\n        res\r\n            .json()\r\n            .then(res => setData(res))\r\n            .catch(err => setErrors(err));\r\n\r\n        \r\n    }\r\n    useEffect(() => {\r\n        fetchData();\r\n        \r\n    },[]);\r\n    function formatDate(date)\r\n    {\r\n        var newDate = new moment(date);\r\n        return newDate.format('MM/DD/YYYY');\r\n    }\r\n\r\n    dailyArr = data.anime.filter(anime =>{\r\n        if(formatDate(anime.airing_start) !== formatDate(today)){\r\n            return false;\r\n        }\r\n        return true;\r\n    }).map(anime=>{return anime});\r\n    if(dailyArr.length == 0)\r\n    {\r\n        return <p>No anime was released today :(</p>\r\n    }\r\n    console.log(dailyArr);\r\n    \r\n   \r\n            return (\r\n\r\n                <div>\r\n                    {/* <p>{dataArr[0].title}</ p> */}\r\n                    <ul>\r\n                        {dailyArr.map(anime => (\r\n\r\n                            <li key={anime.mal_id}>\r\n                                <a href={anime.url}>{anime.title}</a>\r\n                            </li>\r\n\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            );\r\n    \r\n    \r\n}\r\n// const Dailies = props => {\r\n//     console.log(`${props.dailyArr[1].title}`)\r\n//     return(\r\n        \r\n//     <div>\r\n//         <h3>{props.dailyArr[0].title}</h3>\r\n//     </div>\r\n//     )\r\n\r\n// }\r\n\r\n// Dailies.getStaticProps = async function () {\r\n\r\n//     const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\r\n//     const data = await res.json();\r\n//     var today = new Date();\r\n//     var dailyArr = data.anime.map(anime => ({\r\n\r\n\r\n//         title: anime.title,\r\n//         date: anime.airing_start,\r\n//         image: anime.image_url\r\n//     }));\r\n//     // for (var i = 0; i < data.length; i++) {\r\n//     //     if (data.anime[i].airing_start == today) {\r\n//     //          dailyArr = data.anime.map(anime => ({\r\n\r\n\r\n//     //             title: anime.title,\r\n//     //             date: anime.airing_start,\r\n//     //             image: anime.image_url\r\n//     //         }));\r\n//     //     }\r\n//     // }\r\n\r\n//     console.log(dailyArr);\r\n\r\n//     console.log(data.anime[0].title);\r\n//     return { dailyArr }\r\n//}\r\nexport default Dailies;"]},"metadata":{},"sourceType":"module"}