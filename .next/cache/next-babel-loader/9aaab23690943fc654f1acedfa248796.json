{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hassan\\\\Documents\\\\Projects\\\\AnimeCalendar\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Layout from '../components/MyLayout.js';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.state = {\n      seasonValue: 'winter',\n      yearValue: new Date().getFullYear(),\n      data: {\n        anime: []\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      // var season2 = seasonValue;\n      this.setState({\n        seasonValue: e.target.value\n      }); //   if(this.state !== ''){\n      //   const res = await fetch(`https://api.jikan.moe/v3/season/2020/${this.state.seasonValue}`);\n      //   const data = await res.json();\n      //   console.log(this.state);\n      //   console.log(data.anime);\n      //   return {\n      //     anilist: data.anime,\n      //     seasonName: data.season_name,\n      //     seasonYear: data.season_year\n      //   }\n      // }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var year;\n      return _regeneratorRuntime.async(function componentDidUpdate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //Is this check  necessary??\n              year = new Date().getFullYear();\n              console.log(year);\n\n              if (!(this.state.seasonValue !== '')) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetch(\"https://api.jikan.moe/v3/season/\".concat(year, \"/\").concat(this.state.seasonValue)).then(function (data) {\n                return data.json();\n              }).then(function (data) {\n                return _this2.setState({\n                  data: data\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    } // static async componentDidMount() {\n    //   if (this.state == null) {\n    //     await fetch(`https://api.jikan.moe/v3/season/2020/spring`)\n    //     .then(data => data.json())\n    //     .then(data => this.setState({data}));\n    //     console.log(`Show data fetched. Count: ${data.anime.length}`);\n    //     console.log(`Season: ${data.season_name}`);\n    //     // return {\n    //     //   anilist: data.anime,\n    //     //   seasonName: data.season_name,\n    //     //   seasonYear: data.season_year\n    //     // };\n    //   }\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.state)\n      var data = this.state.data;\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, __jsx(\"select\", {\n        value: this.state.seasonValue,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"winter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Winter\"), __jsx(\"option\", {\n        value: \"spring\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Spring\"), __jsx(\"option\", {\n        value: \"summer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Summer\"), __jsx(\"option\", {\n        value: \"fall\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Fall\")), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, data.anime.season_name, \" \", data.anime.season_year), __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, data.anime.map(function (anime) {\n        return __jsx(\"li\", {\n          key: anime.mal_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, __jsx(Link, {\n          href: \"/p/[id]\",\n          as: \"/p/\".concat(anime.mal_id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, anime.title)));\n      })));\n    }\n  }]);\n\n  return Index;\n}(React.Component); // const Index = props => (\n//   //Something isn't right about the logic here. Maybe dropdown shouldn't be here.\n//   <Layout>\n//     {/* <select value={props.value} onChange={props.handleChange}>\n//       <option value = \"winter\">Winter</option>\n//       <option value = \"spring\">Spring</option>\n//       <option value = \"summer\">Summer</option>\n//       <option value = \"fall\">Fall</option>\n//     </select> */}\n//     <h1>{props.seasonName} {props.seasonYear}</h1>\n//     <ul>\n//       {props.anilist.map(anime => (\n//           <li key = {anime.mal_id}>\n//             <Link href=\"/p/[id]\" as={`/p/${anime.mal_id}`}>\n//               <a>{anime.title}</a>\n//             </Link>\n//           </li>\n//         ))}\n//     </ul>\n//   </Layout>\n// );\n// // Index.getInitialState = function(){\n// //   return {seasonValue: 'winter'};\n// // };\n// // Index.handleChange = function(e){\n// //    this.setState({seasonValue:e.target.value});\n// // }\n// Index.getInitialProps = async function() {\n//   const res = await fetch(`https://api.jikan.moe/v3/season/2020/winter`);\n//   const data = await res.json();\n//   console.log(`Show data fetched. Count: ${data.anime.length}`);\n//   console.log(`Season: ${data.season_name}`);\n//   return {\n//     anilist: data.anime,\n//     seasonName: data.season_name,\n//     seasonYear: data.season_year\n//   };\n// };\n// // Index.componentDidUpdate = function(){\n// // }\n// export default Index;\n\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/Hassan/Documents/Projects/AnimeCalendar/pages/index.js"],"names":["React","Layout","Link","fetch","Index","props","handleChange","bind","state","seasonValue","yearValue","Date","getFullYear","data","anime","e","setState","target","value","year","console","log","then","json","season_name","season_year","map","mal_id","title","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Layout from '../components/MyLayout.js';\r\nimport Link from 'next/link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n    this.state =\r\n    {\r\n      seasonValue: 'winter',\r\n      yearValue: new Date().getFullYear(),\r\n\r\n      data: { anime: [] }\r\n    };\r\n  }\r\n\r\n  handleChange(e) {\r\n    // var season2 = seasonValue;\r\n    this.setState({ seasonValue: e.target.value});\r\n\r\n    //   if(this.state !== ''){\r\n\r\n\r\n    //   const res = await fetch(`https://api.jikan.moe/v3/season/2020/${this.state.seasonValue}`);\r\n    //   const data = await res.json();\r\n\r\n    //   console.log(this.state);\r\n    //   console.log(data.anime);\r\n\r\n    //   return {\r\n    //     anilist: data.anime,\r\n    //     seasonName: data.season_name,\r\n    //     seasonYear: data.season_year\r\n    //   }\r\n    // }\r\n\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    //Is this check  necessary??\r\n    var year = new Date().getFullYear();\r\n    console.log(year);\r\n    if (this.state.seasonValue !== '') {\r\n\r\n\r\n      await fetch(`https://api.jikan.moe/v3/season/${year}/${this.state.seasonValue}`)\r\n        .then(data => data.json())\r\n        .then(data => this.setState({ data }));\r\n\r\n\r\n\r\n      // return {\r\n      //   anilist: data.anime,\r\n      //   seasonName: data.season_name,\r\n      //   seasonYear: data.season_year\r\n      // }\r\n    }\r\n  }\r\n  // static async componentDidMount() {\r\n\r\n  //   if (this.state == null) {\r\n\r\n  //     await fetch(`https://api.jikan.moe/v3/season/2020/spring`)\r\n  //     .then(data => data.json())\r\n  //     .then(data => this.setState({data}));\r\n\r\n\r\n  //     console.log(`Show data fetched. Count: ${data.anime.length}`);\r\n  //     console.log(`Season: ${data.season_name}`);\r\n\r\n\r\n  //     // return {\r\n  //     //   anilist: data.anime,\r\n  //     //   seasonName: data.season_name,\r\n  //     //   seasonYear: data.season_year\r\n  //     // };\r\n  //   }\r\n  // }\r\n  render() {\r\n    //console.log(this.state)\r\n    const { data } = this.state;\r\n    return (\r\n      \r\n      <React.Fragment>\r\n       \r\n        <select value={this.state.seasonValue} onChange={this.handleChange}>\r\n          <option value=\"winter\">Winter</option>\r\n          <option value=\"spring\">Spring</option>\r\n          <option value=\"summer\">Summer</option>\r\n          <option value=\"fall\">Fall</option>\r\n        </select>\r\n\r\n\r\n        <h1>{data.anime.season_name} {data.anime.season_year}</h1>\r\n\r\n        <ul>\r\n\r\n          {data.anime.map(anime => {\r\n            return (\r\n              <li key={anime.mal_id}>\r\n                <Link href=\"/p/[id]\" as={`/p/${anime.mal_id}`}>\r\n                  <a>{anime.title}</a>\r\n                </Link>\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </React.Fragment>\r\n\r\n\r\n\r\n    )\r\n  }\r\n}\r\n// const Index = props => (\r\n//   //Something isn't right about the logic here. Maybe dropdown shouldn't be here.\r\n//   <Layout>\r\n\r\n//     {/* <select value={props.value} onChange={props.handleChange}>\r\n//       <option value = \"winter\">Winter</option>\r\n//       <option value = \"spring\">Spring</option>\r\n//       <option value = \"summer\">Summer</option>\r\n//       <option value = \"fall\">Fall</option>\r\n//     </select> */}\r\n//     <h1>{props.seasonName} {props.seasonYear}</h1>\r\n//     <ul>\r\n//       {props.anilist.map(anime => (\r\n//           <li key = {anime.mal_id}>\r\n//             <Link href=\"/p/[id]\" as={`/p/${anime.mal_id}`}>\r\n//               <a>{anime.title}</a>\r\n//             </Link>\r\n//           </li>\r\n//         ))}\r\n//     </ul>\r\n//   </Layout>\r\n\r\n// );\r\n// // Index.getInitialState = function(){\r\n// //   return {seasonValue: 'winter'};\r\n\r\n// // };\r\n// // Index.handleChange = function(e){\r\n\r\n// //    this.setState({seasonValue:e.target.value});\r\n\r\n\r\n\r\n// // }\r\n\r\n// Index.getInitialProps = async function() {\r\n\r\n\r\n\r\n//   const res = await fetch(`https://api.jikan.moe/v3/season/2020/winter`);\r\n//   const data = await res.json();\r\n\r\n//   console.log(`Show data fetched. Count: ${data.anime.length}`);\r\n//   console.log(`Season: ${data.season_name}`);\r\n\r\n\r\n//   return {\r\n//     anilist: data.anime,\r\n//     seasonName: data.season_name,\r\n//     seasonYear: data.season_year\r\n//   };\r\n\r\n// };\r\n// // Index.componentDidUpdate = function(){\r\n\r\n// // }\r\n\r\n// export default Index;\r\n"]},"metadata":{},"sourceType":"module"}