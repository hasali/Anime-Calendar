{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hassan\\\\Documents\\\\Projects\\\\AnimeCalendar\\\\components\\\\Dailies.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from 'isomorphic-unfetch';\nimport moment from 'moment';\n\nvar Dailies = function Dailies() {\n  var _useState = useState(false),\n      hasError = _useState[0],\n      setErrors = _useState[1];\n\n  var _useState2 = useState({\n    anime: []\n  }),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var today = new Date();\n  var dailyArr;\n\n  function fetchData() {\n    var res;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://api.jikan.moe/v3/season/2020/spring'));\n\n          case 2:\n            res = _context.sent;\n            res.json().then(function (res) {\n              return setData(res);\n            })[\"catch\"](function (err) {\n              return setErrors(err);\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  function formatDate(date) {\n    var newDate = new moment(date);\n    return newDate.format('MM/DD/YYYY');\n  }\n\n  dailyArr = data.anime.filter(function (anime) {\n    if (formatDate(anime.airing_start) !== today) {\n      return false;\n    }\n\n    return true;\n  }).map(function (anime) {\n    return anime;\n  });\n  console.log(dailyArr);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, data.anime.map(function (anime) {\n    return __jsx(\"li\", {\n      key: anime.mal_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      href: anime.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, anime.title));\n  })));\n}; // const Dailies = props => {\n//     console.log(`${props.dailyArr[1].title}`)\n//     return(\n//     <div>\n//         <h3>{props.dailyArr[0].title}</h3>\n//     </div>\n//     )\n// }\n// Dailies.getStaticProps = async function () {\n//     const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\n//     const data = await res.json();\n//     var today = new Date();\n//     var dailyArr = data.anime.map(anime => ({\n//         title: anime.title,\n//         date: anime.airing_start,\n//         image: anime.image_url\n//     }));\n//     // for (var i = 0; i < data.length; i++) {\n//     //     if (data.anime[i].airing_start == today) {\n//     //          dailyArr = data.anime.map(anime => ({\n//     //             title: anime.title,\n//     //             date: anime.airing_start,\n//     //             image: anime.image_url\n//     //         }));\n//     //     }\n//     // }\n//     console.log(dailyArr);\n//     console.log(data.anime[0].title);\n//     return { dailyArr }\n//}\n\n\nexport default Dailies;","map":{"version":3,"sources":["C:/Users/Hassan/Documents/Projects/AnimeCalendar/components/Dailies.js"],"names":["React","useState","useEffect","fetch","moment","Dailies","hasError","setErrors","anime","data","setData","today","Date","dailyArr","fetchData","res","json","then","err","formatDate","date","newDate","format","filter","airing_start","map","console","log","mal_id","url","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,kBACYJ,QAAQ,CAAC,KAAD,CADpB;AAAA,MACXK,QADW;AAAA,MACDC,SADC;;AAAA,mBAEMN,QAAQ,CAAC;AAACO,IAAAA,KAAK,EAAE;AAAR,GAAD,CAFd;AAAA,MAEXC,IAFW;AAAA,MAELC,OAFK;;AAGlB,MAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AAEA,MAAIC,QAAJ;;AACA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACsBX,KAAK,CAAC,6CAAD,CAD3B;;AAAA;AACUY,YAAAA,GADV;AAEIA,YAAAA,GAAG,CACEC,IADL,GAEKC,IAFL,CAEU,UAAAF,GAAG;AAAA,qBAAIL,OAAO,CAACK,GAAD,CAAX;AAAA,aAFb,WAGW,UAAAG,GAAG;AAAA,qBAAIX,SAAS,CAACW,GAAD,CAAb;AAAA,aAHd;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASAhB,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,SAAS;AAEZ,GAHQ,EAGP,EAHO,CAAT;;AAIA,WAASK,UAAT,CAAoBC,IAApB,EACA;AACI,QAAIC,OAAO,GAAG,IAAIjB,MAAJ,CAAWgB,IAAX,CAAd;AACA,WAAOC,OAAO,CAACC,MAAR,CAAe,YAAf,CAAP;AACH;;AACDT,EAAAA,QAAQ,GAAGJ,IAAI,CAACD,KAAL,CAAWe,MAAX,CAAkB,UAAAf,KAAK,EAAG;AACjC,QAAGW,UAAU,CAACX,KAAK,CAACgB,YAAP,CAAV,KAAmCb,KAAtC,EAA4C;AACxC,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GALU,EAKRc,GALQ,CAKJ,UAAAjB,KAAK,EAAE;AAAC,WAAOA,KAAP;AAAa,GALjB,CAAX;AAMAkB,EAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ;AAGQ,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,IAAI,CAACD,KAAL,CAAWiB,GAAX,CAAe,UAAAjB,KAAK;AAAA,WAEjB;AAAI,MAAA,GAAG,EAAEA,KAAK,CAACoB,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,IAAI,EAAEpB,KAAK,CAACqB,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBrB,KAAK,CAACsB,KAA3B,CADJ,CAFiB;AAAA,GAApB,CADL,CAFJ,CAFJ;AAiBX,CAlDD,C,CAmDA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA,eAAezB,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport fetch from 'isomorphic-unfetch';\r\nimport moment from 'moment'\r\n\r\nconst Dailies = () => {\r\n    const [hasError, setErrors] = useState(false);\r\n    const [data, setData] = useState({anime: []});\r\n    const today = new Date();\r\n    \r\n    var dailyArr;\r\n    async function fetchData() {\r\n        const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\r\n        res\r\n            .json()\r\n            .then(res => setData(res))\r\n            .catch(err => setErrors(err));\r\n\r\n        \r\n    }\r\n    useEffect(() => {\r\n        fetchData();\r\n        \r\n    },[]);\r\n    function formatDate(date)\r\n    {\r\n        var newDate = new moment(date);\r\n        return newDate.format('MM/DD/YYYY');\r\n    }\r\n    dailyArr = data.anime.filter(anime =>{\r\n        if(formatDate(anime.airing_start) !== today){\r\n            return false;\r\n        }\r\n        return true;\r\n    }).map(anime=>{return anime});\r\n    console.log(dailyArr);\r\n    \r\n   \r\n            return (\r\n\r\n                <div>\r\n                    {/* <p>{dataArr[0].title}</ p> */}\r\n                    <ul>\r\n                        {data.anime.map(anime => (\r\n\r\n                            <li key={anime.mal_id}>\r\n                                <a href={anime.url}>{anime.title}</a>\r\n                            </li>\r\n\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            );\r\n    \r\n    \r\n}\r\n// const Dailies = props => {\r\n//     console.log(`${props.dailyArr[1].title}`)\r\n//     return(\r\n        \r\n//     <div>\r\n//         <h3>{props.dailyArr[0].title}</h3>\r\n//     </div>\r\n//     )\r\n\r\n// }\r\n\r\n// Dailies.getStaticProps = async function () {\r\n\r\n//     const res = await fetch('https://api.jikan.moe/v3/season/2020/spring');\r\n//     const data = await res.json();\r\n//     var today = new Date();\r\n//     var dailyArr = data.anime.map(anime => ({\r\n\r\n\r\n//         title: anime.title,\r\n//         date: anime.airing_start,\r\n//         image: anime.image_url\r\n//     }));\r\n//     // for (var i = 0; i < data.length; i++) {\r\n//     //     if (data.anime[i].airing_start == today) {\r\n//     //          dailyArr = data.anime.map(anime => ({\r\n\r\n\r\n//     //             title: anime.title,\r\n//     //             date: anime.airing_start,\r\n//     //             image: anime.image_url\r\n//     //         }));\r\n//     //     }\r\n//     // }\r\n\r\n//     console.log(dailyArr);\r\n\r\n//     console.log(data.anime[0].title);\r\n//     return { dailyArr }\r\n//}\r\nexport default Dailies;"]},"metadata":{},"sourceType":"module"}